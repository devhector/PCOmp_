/* Generated By:JavaCC: Do not edit this line. Karloff.java */
import java.io.*;
public class Karloff implements KarloffConstants {

  public static void main(String args[]) throws ParseException,IOException {

 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

  static final public void Karloff() throws ParseException {
 Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
      case ACHAVES:
      case FCHAVES:
      case VOID:
      case INT:
      case BOOL:
      case VAR:
      case PV:
      case LPAR:
      case RPAR:
      case IF:
      case THEN:
      case WHILE:
      case REPEAT:
      case UNTIL:
      case RETURN:
      case OUTPUT:
      case FUNC:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
      case SUM:
      case SUB:
      case MUL:
      case DIV:
      case ATR:
      case EQ:
      case LESS:
      case GREATER:
      case OR:
      case AND:
      case SEPARATOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN:
        jj_consume_token(MAIN);
           System.out.println("Palavra reservada: main");
        break;
      case VOID:
        jj_consume_token(VOID);
           System.out.println("Palavra reservada: void");
        break;
      case INT:
        jj_consume_token(INT);
          System.out.println("Palavra reservada: int");
        break;
      case BOOL:
        jj_consume_token(BOOL);
           System.out.println("Palavra reservada: bool");
        break;
      case VAR:
        jj_consume_token(VAR);
          System.out.println("Palavra reservada: newVar");
        break;
      case IF:
        jj_consume_token(IF);
         System.out.println("Palavra reservada: if");
        break;
      case THEN:
        jj_consume_token(THEN);
           System.out.println("Palavra reservada: then");
        break;
      case WHILE:
        jj_consume_token(WHILE);
            System.out.println("Palavra reservada: while");
        break;
      case REPEAT:
        jj_consume_token(REPEAT);
             System.out.println("Palavra reservada: repeat");
        break;
      case UNTIL:
        jj_consume_token(UNTIL);
            System.out.println("Palavra reservada: until");
        break;
      case RETURN:
        jj_consume_token(RETURN);
             System.out.println("Palavra reservada: return");
        break;
      case OUTPUT:
        jj_consume_token(OUTPUT);
             System.out.println("Palavra reservada: System.output");
        break;
      case TRUE:
        jj_consume_token(TRUE);
           System.out.println("Palavra reservada: true");
        break;
      case FALSE:
        jj_consume_token(FALSE);
            System.out.println("Palavra reservada: false");
        break;
      case ACHAVES:
        jj_consume_token(ACHAVES);
              System.out.println("Abre chaves: {");
        break;
      case FCHAVES:
        jj_consume_token(FCHAVES);
              System.out.println("Fecha chaves: }");
        break;
      case NUM:
        t = jj_consume_token(NUM);
            System.out.println("N\u00famero: "+ t.image);
        break;
      case ID:
        t = jj_consume_token(ID);
           System.out.println("Identificador: "+ t.image);
        break;
      case PV:
        jj_consume_token(PV);
         System.out.println("Ponto e v\u00edrgula: ;");
        break;
      case SUM:
        jj_consume_token(SUM);
          System.out.println("Soma: +");
        break;
      case SUB:
        jj_consume_token(SUB);
          System.out.println("Subtra\u00e7\u00e3o: -");
        break;
      case MUL:
        jj_consume_token(MUL);
          System.out.println("Multiplica\u00e7\u00e3o: *");
        break;
      case DIV:
        jj_consume_token(DIV);
          System.out.println("Divis\u00e3o: /");
        break;
      case ATR:
        jj_consume_token(ATR);
          System.out.println("Atribui\u00e7\u00e3o: =");
        break;
      case EQ:
        jj_consume_token(EQ);
         System.out.println("Igualdade: ==");
        break;
      case LPAR:
        jj_consume_token(LPAR);
           System.out.println("Abre par\u00eanteses: (");
        break;
      case RPAR:
        jj_consume_token(RPAR);
           System.out.println("Fecha par\u00eanteses: )");
        break;
      case LESS:
        jj_consume_token(LESS);
           System.out.println("Menor que: <");
        break;
      case GREATER:
        jj_consume_token(GREATER);
              System.out.println("Maior que: >");
        break;
      case OR:
        jj_consume_token(OR);
         System.out.println("Op. OU: |");
        break;
      case AND:
        jj_consume_token(AND);
          System.out.println("Op. E: &");
        break;
      case SEPARATOR:
        jj_consume_token(SEPARATOR);
                System.out.println("Separador: ,");
        break;
      case FUNC:
        jj_consume_token(FUNC);
          System.out.println("Palavra reservada: func");
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public KarloffTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffffe0,0xffffffe0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3f,0x3f,};
   }

  /** Constructor with InputStream. */
  public Karloff(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Karloff(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Karloff(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new KarloffTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Karloff(KarloffTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(KarloffTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
